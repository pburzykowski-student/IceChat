// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Chat_h__
#define __Chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Chat
{

class Room;
class RoomPrx;
class User;
class UserPrx;
class Server;
class ServerPrx;

}

namespace Chat
{

class UserAlreadyExists : public ::Ice::UserExceptionHelper<UserAlreadyExists, ::Ice::UserException>
{
public:

    virtual ~UserAlreadyExists();

    UserAlreadyExists(const UserAlreadyExists&) = default;

    UserAlreadyExists() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

static UserAlreadyExists _iceS_UserAlreadyExists_init;

class RoomAlreadyExists : public ::Ice::UserExceptionHelper<RoomAlreadyExists, ::Ice::UserException>
{
public:

    virtual ~RoomAlreadyExists();

    RoomAlreadyExists(const RoomAlreadyExists&) = default;

    RoomAlreadyExists() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

class NoSuchUserExists : public ::Ice::UserExceptionHelper<NoSuchUserExists, ::Ice::UserException>
{
public:

    virtual ~NoSuchUserExists();

    NoSuchUserExists(const NoSuchUserExists&) = default;

    NoSuchUserExists() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

class NoSuchRoomExists : public ::Ice::UserExceptionHelper<NoSuchRoomExists, ::Ice::UserException>
{
public:

    virtual ~NoSuchRoomExists();

    NoSuchRoomExists(const NoSuchRoomExists&) = default;

    NoSuchRoomExists() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

class WrongPassword : public ::Ice::UserExceptionHelper<WrongPassword, ::Ice::UserException>
{
public:

    virtual ~WrongPassword();

    WrongPassword(const WrongPassword&) = default;

    WrongPassword() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

using RoomList = ::std::vector<::std::shared_ptr<::Chat::RoomPrx>>;

using UserList = ::std::vector<::std::shared_ptr<::Chat::UserPrx>>;

}

namespace Chat
{

class User : public virtual ::Ice::Object
{
public:

    using ProxyType = UserPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void SendMessage(::std::string, ::std::shared_ptr<::Chat::UserPrx>, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendPrivateMessage(::std::shared_ptr<::Chat::UserPrx>, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_SendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ChangePassword(::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_ChangePassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getName(const ::Ice::Current&) = 0;
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getPassword(const ::Ice::Current&) = 0;
    bool _iceD_getPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class Server : public virtual ::Ice::Object
{
public:

    using ProxyType = ServerPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<::Chat::RoomPrx> CreateRoom(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_CreateRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomList getRooms(const ::Ice::Current&) = 0;
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::shared_ptr<::Chat::RoomPrx> FindRoom(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_FindRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::shared_ptr<::Chat::UserPrx> FindUser(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_FindUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RegisterUser(::std::shared_ptr<::Chat::UserPrx>, const ::Ice::Current&) = 0;
    bool _iceD_RegisterUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeUser(::std::shared_ptr<::Chat::UserPrx>, const ::Ice::Current&) = 0;
    bool _iceD_removeUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class Room : public virtual ::Ice::Object
{
public:

    using ProxyType = RoomPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current&) = 0;
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::UserList getUsers(const ::Ice::Current&) = 0;
    bool _iceD_getUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void AddUser(::std::shared_ptr<::Chat::UserPrx>, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_AddUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendMessage(::std::shared_ptr<::Chat::UserPrx>, ::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Destroy(const ::Ice::Current&) = 0;
    bool _iceD_Destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void LeaveRoom(::std::shared_ptr<::Chat::UserPrx>, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_LeaveRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace Chat
{

class UserPrx : public virtual ::Ice::Proxy<UserPrx, ::Ice::ObjectPrx>
{
public:

    void SendMessage(const ::std::string& iceP_roomName, const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::UserPrx::_iceI_SendMessage, iceP_roomName, iceP_who, iceP_message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto SendMessageAsync(const ::std::string& iceP_roomName, const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::UserPrx::_iceI_SendMessage, iceP_roomName, iceP_who, iceP_message, context);
    }

    ::std::function<void()>
    SendMessageAsync(const ::std::string& iceP_roomName, const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::UserPrx::_iceI_SendMessage, iceP_roomName, iceP_who, iceP_message, context);
    }

    void _iceI_SendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::std::string&, const ::Ice::Context&);

    void SendPrivateMessage(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::UserPrx::_iceI_SendPrivateMessage, iceP_who, iceP_message, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto SendPrivateMessageAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::UserPrx::_iceI_SendPrivateMessage, iceP_who, iceP_message, context);
    }

    ::std::function<void()>
    SendPrivateMessageAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::UserPrx::_iceI_SendPrivateMessage, iceP_who, iceP_message, context);
    }

    void _iceI_SendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::std::string&, const ::Ice::Context&);

    void ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::UserPrx::_iceI_ChangePassword, iceP_oldpassword, iceP_newpassword, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ChangePasswordAsync(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::UserPrx::_iceI_ChangePassword, iceP_oldpassword, iceP_newpassword, context);
    }

    ::std::function<void()>
    ChangePasswordAsync(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::UserPrx::_iceI_ChangePassword, iceP_oldpassword, iceP_newpassword, context);
    }

    void _iceI_ChangePassword(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::std::string getName(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &Chat::UserPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &Chat::UserPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::UserPrx::_iceI_getName, context);
    }

    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);

    ::std::string getPassword(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &Chat::UserPrx::_iceI_getPassword, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPasswordAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &Chat::UserPrx::_iceI_getPassword, context);
    }

    ::std::function<void()>
    getPasswordAsync(::std::function<void(::std::string)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::UserPrx::_iceI_getPassword, context);
    }

    void _iceI_getPassword(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    UserPrx() = default;
    friend ::std::shared_ptr<UserPrx> IceInternal::createProxy<UserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class ServerPrx : public virtual ::Ice::Proxy<ServerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<::Chat::RoomPrx> CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(true, this, &Chat::ServerPrx::_iceI_CreateRoom, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto CreateRoomAsync(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::RoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>, P>(false, this, &Chat::ServerPrx::_iceI_CreateRoom, iceP_name, context);
    }

    ::std::function<void()>
    CreateRoomAsync(const ::std::string& iceP_name,
                    ::std::function<void(::std::shared_ptr<::Chat::RoomPrx>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(response, ex, sent, this, &Chat::ServerPrx::_iceI_CreateRoom, iceP_name, context);
    }

    void _iceI_CreateRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>&, const ::std::string&, const ::Ice::Context&);

    ::Chat::RoomList getRooms(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::RoomList>(true, this, &Chat::ServerPrx::_iceI_getRooms, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRoomsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::RoomList>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::RoomList, P>(false, this, &Chat::ServerPrx::_iceI_getRooms, context);
    }

    ::std::function<void()>
    getRoomsAsync(::std::function<void(::Chat::RoomList)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::RoomList>(response, ex, sent, this, &Chat::ServerPrx::_iceI_getRooms, context);
    }

    void _iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::RoomList>>&, const ::Ice::Context&);

    ::std::shared_ptr<::Chat::RoomPrx> FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(true, this, &Chat::ServerPrx::_iceI_FindRoom, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto FindRoomAsync(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::RoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::RoomPrx>, P>(false, this, &Chat::ServerPrx::_iceI_FindRoom, iceP_name, context);
    }

    ::std::function<void()>
    FindRoomAsync(const ::std::string& iceP_name,
                  ::std::function<void(::std::shared_ptr<::Chat::RoomPrx>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::RoomPrx>>(response, ex, sent, this, &Chat::ServerPrx::_iceI_FindRoom, iceP_name, context);
    }

    void _iceI_FindRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>&, const ::std::string&, const ::Ice::Context&);

    ::std::shared_ptr<::Chat::UserPrx> FindUser(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::UserPrx>>(true, this, &Chat::ServerPrx::_iceI_FindUser, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto FindUserAsync(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Chat::UserPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Chat::UserPrx>, P>(false, this, &Chat::ServerPrx::_iceI_FindUser, iceP_name, context);
    }

    ::std::function<void()>
    FindUserAsync(const ::std::string& iceP_name,
                  ::std::function<void(::std::shared_ptr<::Chat::UserPrx>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::Chat::UserPrx>>(response, ex, sent, this, &Chat::ServerPrx::_iceI_FindUser, iceP_name, context);
    }

    void _iceI_FindUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::UserPrx>>>&, const ::std::string&, const ::Ice::Context&);

    void RegisterUser(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::ServerPrx::_iceI_RegisterUser, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto RegisterUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::ServerPrx::_iceI_RegisterUser, iceP_name, context);
    }

    ::std::function<void()>
    RegisterUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::ServerPrx::_iceI_RegisterUser, iceP_name, context);
    }

    void _iceI_RegisterUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::Ice::Context&);

    void removeUser(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::ServerPrx::_iceI_removeUser, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto removeUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::ServerPrx::_iceI_removeUser, iceP_name, context);
    }

    ::std::function<void()>
    removeUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_name,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::ServerPrx::_iceI_removeUser, iceP_name, context);
    }

    void _iceI_removeUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    ServerPrx() = default;
    friend ::std::shared_ptr<ServerPrx> IceInternal::createProxy<ServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class RoomPrx : public virtual ::Ice::Proxy<RoomPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string getName(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &Chat::RoomPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &Chat::RoomPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::RoomPrx::_iceI_getName, context);
    }

    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);

    ::Chat::UserList getUsers(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Chat::UserList>(true, this, &Chat::RoomPrx::_iceI_getUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUsersAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Chat::UserList>>().get_future())
    {
        return _makePromiseOutgoing<::Chat::UserList, P>(false, this, &Chat::RoomPrx::_iceI_getUsers, context);
    }

    ::std::function<void()>
    getUsersAsync(::std::function<void(::Chat::UserList)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Chat::UserList>(response, ex, sent, this, &Chat::RoomPrx::_iceI_getUsers, context);
    }

    void _iceI_getUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::UserList>>&, const ::Ice::Context&);

    void AddUser(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::RoomPrx::_iceI_AddUser, iceP_who, iceP_password, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto AddUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::RoomPrx::_iceI_AddUser, iceP_who, iceP_password, context);
    }

    ::std::function<void()>
    AddUserAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_password,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::RoomPrx::_iceI_AddUser, iceP_who, iceP_password, context);
    }

    void _iceI_AddUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::std::string&, const ::Ice::Context&);

    void SendMessage(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::RoomPrx::_iceI_SendMessage, iceP_who, iceP_message, iceP_passwd, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto SendMessageAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::RoomPrx::_iceI_SendMessage, iceP_who, iceP_message, iceP_passwd, context);
    }

    ::std::function<void()>
    SendMessageAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::RoomPrx::_iceI_SendMessage, iceP_who, iceP_message, iceP_passwd, context);
    }

    void _iceI_SendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void Destroy(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::RoomPrx::_iceI_Destroy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto DestroyAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::RoomPrx::_iceI_Destroy, context);
    }

    ::std::function<void()>
    DestroyAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::RoomPrx::_iceI_Destroy, context);
    }

    void _iceI_Destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    void LeaveRoom(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Chat::RoomPrx::_iceI_LeaveRoom, iceP_who, iceP_passwd, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto LeaveRoomAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Chat::RoomPrx::_iceI_LeaveRoom, iceP_who, iceP_passwd, context);
    }

    ::std::function<void()>
    LeaveRoomAsync(const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::std::string& iceP_passwd,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::RoomPrx::_iceI_LeaveRoom, iceP_who, iceP_passwd, context);
    }

    void _iceI_LeaveRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Chat::UserPrx>&, const ::std::string&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    RoomPrx() = default;
    friend ::std::shared_ptr<RoomPrx> IceInternal::createProxy<RoomPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

}

namespace Chat
{

using RoomPtr = ::std::shared_ptr<Room>;
using RoomPrxPtr = ::std::shared_ptr<RoomPrx>;

using UserPtr = ::std::shared_ptr<User>;
using UserPrxPtr = ::std::shared_ptr<UserPrx>;

using ServerPtr = ::std::shared_ptr<Server>;
using ServerPrxPtr = ::std::shared_ptr<ServerPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Chat
{

class Room;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::Room*);

class User;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::User>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::User*);

class Server;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Server>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::Server*);

}

}

namespace Chat
{

class Room;
::Ice::Object* upCast(::Chat::Room*);
typedef ::IceInternal::Handle< ::Chat::Room> RoomPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room> RoomPrx;
typedef RoomPrx RoomPrxPtr;
void _icePatchObjectPtr(RoomPtr&, const ::Ice::ObjectPtr&);

class User;
::Ice::Object* upCast(::Chat::User*);
typedef ::IceInternal::Handle< ::Chat::User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::User> UserPrx;
typedef UserPrx UserPrxPtr;
void _icePatchObjectPtr(UserPtr&, const ::Ice::ObjectPtr&);

class Server;
::Ice::Object* upCast(::Chat::Server*);
typedef ::IceInternal::Handle< ::Chat::Server> ServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Server> ServerPrx;
typedef ServerPrx ServerPrxPtr;
void _icePatchObjectPtr(ServerPtr&, const ::Ice::ObjectPtr&);

}

namespace Chat
{

class UserAlreadyExists : public ::Ice::UserException
{
public:

    UserAlreadyExists() {}
    virtual ~UserAlreadyExists() throw();

    virtual ::std::string ice_id() const;
    virtual UserAlreadyExists* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static UserAlreadyExists _iceS_UserAlreadyExists_init;

class RoomAlreadyExists : public ::Ice::UserException
{
public:

    RoomAlreadyExists() {}
    virtual ~RoomAlreadyExists() throw();

    virtual ::std::string ice_id() const;
    virtual RoomAlreadyExists* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class NoSuchUserExists : public ::Ice::UserException
{
public:

    NoSuchUserExists() {}
    virtual ~NoSuchUserExists() throw();

    virtual ::std::string ice_id() const;
    virtual NoSuchUserExists* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class NoSuchRoomExists : public ::Ice::UserException
{
public:

    NoSuchRoomExists() {}
    virtual ~NoSuchRoomExists() throw();

    virtual ::std::string ice_id() const;
    virtual NoSuchRoomExists* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class WrongPassword : public ::Ice::UserException
{
public:

    WrongPassword() {}
    virtual ~WrongPassword() throw();

    virtual ::std::string ice_id() const;
    virtual WrongPassword* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

typedef ::std::vector< ::Chat::RoomPrx> RoomList;

typedef ::std::vector< ::Chat::UserPrx> UserList;

}

namespace Chat
{

class Callback_User_SendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_SendMessage_Base> Callback_User_SendMessagePtr;

class Callback_User_SendPrivateMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_SendPrivateMessage_Base> Callback_User_SendPrivateMessagePtr;

class Callback_User_ChangePassword_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_ChangePassword_Base> Callback_User_ChangePasswordPtr;

class Callback_User_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getName_Base> Callback_User_getNamePtr;

class Callback_User_getPassword_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getPassword_Base> Callback_User_getPasswordPtr;

class Callback_Server_CreateRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_CreateRoom_Base> Callback_Server_CreateRoomPtr;

class Callback_Server_getRooms_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_getRooms_Base> Callback_Server_getRoomsPtr;

class Callback_Server_FindRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_FindRoom_Base> Callback_Server_FindRoomPtr;

class Callback_Server_FindUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_FindUser_Base> Callback_Server_FindUserPtr;

class Callback_Server_RegisterUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_RegisterUser_Base> Callback_Server_RegisterUserPtr;

class Callback_Server_removeUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_removeUser_Base> Callback_Server_removeUserPtr;

class Callback_Room_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_getName_Base> Callback_Room_getNamePtr;

class Callback_Room_getUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_getUsers_Base> Callback_Room_getUsersPtr;

class Callback_Room_AddUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_AddUser_Base> Callback_Room_AddUserPtr;

class Callback_Room_SendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_SendMessage_Base> Callback_Room_SendMessagePtr;

class Callback_Room_Destroy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_Destroy_Base> Callback_Room_DestroyPtr;

class Callback_Room_LeaveRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_LeaveRoom_Base> Callback_Room_LeaveRoomPtr;

}

namespace IceProxy
{

namespace Chat
{

class User : public virtual ::Ice::Proxy<User, ::IceProxy::Ice::Object>
{
public:

    void SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_SendMessage(_iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Chat::Callback_User_SendMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::std::string& iceP_roomName, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::Chat::Callback_User_SendMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_roomName, iceP_who, iceP_message, context, del, cookie);
    }

    void end_SendMessage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_SendMessage(const ::std::string&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_SendPrivateMessage(_iceI_begin_SendPrivateMessage(iceP_who, iceP_message, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_SendPrivateMessage(iceP_who, iceP_message, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendPrivateMessage(iceP_who, iceP_message, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendPrivateMessage(iceP_who, iceP_message, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Chat::Callback_User_SendPrivateMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendPrivateMessage(iceP_who, iceP_message, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::Chat::Callback_User_SendPrivateMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendPrivateMessage(iceP_who, iceP_message, context, del, cookie);
    }

    void end_SendPrivateMessage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_SendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_ChangePassword(_iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Chat::Callback_User_ChangePasswordPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::std::string& iceP_oldpassword, const ::std::string& iceP_newpassword, const ::Ice::Context& context, const ::Chat::Callback_User_ChangePasswordPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ChangePassword(iceP_oldpassword, iceP_newpassword, context, del, cookie);
    }

    void end_ChangePassword(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ChangePassword(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_User_getNamePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_User_getNamePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, del, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getPassword(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPassword(_iceI_begin_getPassword(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPassword(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassword(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassword(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Chat::Callback_User_getPasswordPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassword(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& context, const ::Chat::Callback_User_getPasswordPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassword(context, del, cookie);
    }

    ::std::string end_getPassword(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPassword(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class Server : public virtual ::Ice::Proxy<Server, ::IceProxy::Ice::Object>
{
public:

    ::Chat::RoomPrx CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_CreateRoom(_iceI_begin_CreateRoom(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_CreateRoom(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_CreateRoom(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_CreateRoom(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& iceP_name, const ::Chat::Callback_Server_CreateRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_CreateRoom(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Chat::Callback_Server_CreateRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_CreateRoom(iceP_name, context, del, cookie);
    }

    ::Chat::RoomPrx end_CreateRoom(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_CreateRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::RoomList getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRooms(_iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Chat::Callback_Server_getRoomsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Chat::Callback_Server_getRoomsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, del, cookie);
    }

    ::Chat::RoomList end_getRooms(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRooms(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::RoomPrx FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_FindRoom(_iceI_begin_FindRoom(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_FindRoom(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindRoom(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindRoom(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& iceP_name, const ::Chat::Callback_Server_FindRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindRoom(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Chat::Callback_Server_FindRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindRoom(iceP_name, context, del, cookie);
    }

    ::Chat::RoomPrx end_FindRoom(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_FindRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::UserPrx FindUser(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_FindUser(_iceI_begin_FindUser(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_FindUser(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_FindUser(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FindUser(const ::std::string& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindUser(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindUser(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindUser(const ::std::string& iceP_name, const ::Chat::Callback_Server_FindUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_FindUser(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Chat::Callback_Server_FindUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_FindUser(iceP_name, context, del, cookie);
    }

    ::Chat::UserPrx end_FindUser(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_FindUser(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_RegisterUser(_iceI_begin_RegisterUser(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_RegisterUser(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterUser(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Chat::Callback_Server_RegisterUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context, const ::Chat::Callback_Server_RegisterUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_RegisterUser(iceP_name, context, del, cookie);
    }

    void end_RegisterUser(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_RegisterUser(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void removeUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_removeUser(_iceI_begin_removeUser(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_removeUser(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::UserPrx& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::UserPrx& iceP_name, const ::Chat::Callback_Server_removeUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_removeUser(const ::Chat::UserPrx& iceP_name, const ::Ice::Context& context, const ::Chat::Callback_Server_removeUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_removeUser(iceP_name, context, del, cookie);
    }

    void end_removeUser(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_removeUser(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class Room : public virtual ::Ice::Proxy<Room, ::IceProxy::Ice::Object>
{
public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_Room_getNamePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_Room_getNamePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, del, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::UserList getUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getUsers(_iceI_begin_getUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Chat::Callback_Room_getUsersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& context, const ::Chat::Callback_Room_getUsersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsers(context, del, cookie);
    }

    ::Chat::UserList end_getUsers(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_AddUser(_iceI_begin_AddUser(iceP_who, iceP_password, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_AddUser(iceP_who, iceP_password, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_AddUser(iceP_who, iceP_password, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_AddUser(iceP_who, iceP_password, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Chat::Callback_Room_AddUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_AddUser(iceP_who, iceP_password, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_password, const ::Ice::Context& context, const ::Chat::Callback_Room_AddUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_AddUser(iceP_who, iceP_password, context, del, cookie);
    }

    void end_AddUser(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_AddUser(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_SendMessage(_iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Chat::Callback_Room_SendMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::std::string& iceP_passwd, const ::Ice::Context& context, const ::Chat::Callback_Room_SendMessagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_SendMessage(iceP_who, iceP_message, iceP_passwd, context, del, cookie);
    }

    void end_SendMessage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_SendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void Destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_Destroy(_iceI_begin_Destroy(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_Destroy(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Destroy(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Destroy(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Chat::Callback_Room_DestroyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Destroy(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& context, const ::Chat::Callback_Room_DestroyPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Destroy(context, del, cookie);
    }

    void end_Destroy(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_Destroy(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_LeaveRoom(_iceI_begin_LeaveRoom(iceP_who, iceP_passwd, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_LeaveRoom(iceP_who, iceP_passwd, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_LeaveRoom(iceP_who, iceP_passwd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_LeaveRoom(iceP_who, iceP_passwd, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Chat::Callback_Room_LeaveRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_LeaveRoom(iceP_who, iceP_passwd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_passwd, const ::Ice::Context& context, const ::Chat::Callback_Room_LeaveRoomPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_LeaveRoom(iceP_who, iceP_passwd, context, del, cookie);
    }

    void end_LeaveRoom(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_LeaveRoom(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace Chat
{

class User : public virtual ::Ice::Object
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;

    virtual ~User();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void SendMessage(const ::std::string&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_SendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ChangePassword(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_ChangePassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getPassword(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class Server : public virtual ::Ice::Object
{
public:

    typedef ServerPrx ProxyType;
    typedef ServerPtr PointerType;

    virtual ~Server();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::Chat::RoomPrx CreateRoom(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_CreateRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomList getRooms(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomPrx FindRoom(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_FindRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::UserPrx FindUser(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_FindUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RegisterUser(const ::Chat::UserPrx&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_RegisterUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeUser(const ::Chat::UserPrx&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_removeUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Server& lhs, const Server& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Server& lhs, const Server& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class Room : public virtual ::Ice::Object
{
public:

    typedef RoomPrx ProxyType;
    typedef RoomPtr PointerType;

    virtual ~Room();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::UserList getUsers(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void AddUser(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_AddUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Destroy(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_Destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void LeaveRoom(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_LeaveRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Room& lhs, const Room& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Room& lhs, const Room& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::Chat::UserAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::RoomAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoSuchUserExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoSuchRoomExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::WrongPassword>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Chat
{

template<class T>
class CallbackNC_User_SendMessage : public Callback_User_SendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_SendMessage : public Callback_User_SendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_SendPrivateMessage : public Callback_User_SendPrivateMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_SendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_SendPrivateMessage : public Callback_User_SendPrivateMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_SendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_ChangePassword : public Callback_User_ChangePassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_ChangePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_ChangePassword(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_ChangePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_ChangePassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_ChangePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_ChangePassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_ChangePassword : public Callback_User_ChangePassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_ChangePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_ChangePassword(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_ChangePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_ChangePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_ChangePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_ChangePasswordPtr
newCallback_User_ChangePassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_ChangePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_User_getPassword : public Callback_User_getPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getPassword(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_User_getPasswordPtr
newCallback_User_getPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_getPasswordPtr
newCallback_User_getPassword(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getPassword<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_getPassword : public Callback_User_getPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::UserPrx proxy = ::Chat::UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getPassword(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_User_getPasswordPtr
newCallback_User_getPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_getPasswordPtr
newCallback_User_getPassword(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_CreateRoom : public Callback_Server_CreateRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomPrx&);

    CallbackNC_Server_CreateRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomPrx ret;
        try
        {
            ret = proxy->end_CreateRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_CreateRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_CreateRoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_CreateRoom : public Callback_Server_CreateRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomPrx&, const CT&);

    Callback_Server_CreateRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomPrx ret;
        try
        {
            ret = proxy->end_CreateRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_CreateRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_CreateRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_getRooms : public Callback_Server_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomList&);

    CallbackNC_Server_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_getRooms : public Callback_Server_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomList&, const CT&);

    Callback_Server_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getRooms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getRooms<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_FindRoom : public Callback_Server_FindRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomPrx&);

    CallbackNC_Server_FindRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomPrx ret;
        try
        {
            ret = proxy->end_FindRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindRoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_FindRoom : public Callback_Server_FindRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomPrx&, const CT&);

    Callback_Server_FindRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::RoomPrx ret;
        try
        {
            ret = proxy->end_FindRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_FindUser : public Callback_Server_FindUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::UserPrx&);

    CallbackNC_Server_FindUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::UserPrx ret;
        try
        {
            ret = proxy->end_FindUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_FindUserPtr
newCallback_Server_FindUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_FindUserPtr
newCallback_Server_FindUser(T* instance, void (T::*cb)(const ::Chat::UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_FindUser : public Callback_Server_FindUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::UserPrx&, const CT&);

    Callback_Server_FindUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        ::Chat::UserPrx ret;
        try
        {
            ret = proxy->end_FindUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_FindUserPtr
newCallback_Server_FindUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_FindUserPtr
newCallback_Server_FindUser(T* instance, void (T::*cb)(const ::Chat::UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_RegisterUser : public Callback_Server_RegisterUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_RegisterUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_RegisterUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_RegisterUser : public Callback_Server_RegisterUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_RegisterUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_RegisterUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterUserPtr
newCallback_Server_RegisterUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_removeUser : public Callback_Server_removeUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_removeUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_Server_removeUserPtr
newCallback_Server_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_removeUserPtr
newCallback_Server_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_removeUserPtr
newCallback_Server_removeUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_removeUserPtr
newCallback_Server_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_removeUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_removeUser : public Callback_Server_removeUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_removeUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::ServerPrx proxy = ::Chat::ServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_removeUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Server_removeUserPtr
newCallback_Server_removeUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeUserPtr
newCallback_Server_removeUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeUserPtr
newCallback_Server_removeUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_removeUserPtr
newCallback_Server_removeUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_removeUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_getName : public Callback_Room_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Room_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Room_getNamePtr
newCallback_Room_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_getNamePtr
newCallback_Room_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_getName : public Callback_Room_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Room_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Room_getNamePtr
newCallback_Room_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_getNamePtr
newCallback_Room_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Room_getUsers : public Callback_Room_getUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::UserList&);

    CallbackNC_Room_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        ::Chat::UserList ret;
        try
        {
            ret = proxy->end_getUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Room_getUsersPtr
newCallback_Room_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_getUsersPtr
newCallback_Room_getUsers(T* instance, void (T::*cb)(const ::Chat::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_getUsers : public Callback_Room_getUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::UserList&, const CT&);

    Callback_Room_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        ::Chat::UserList ret;
        try
        {
            ret = proxy->end_getUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Room_getUsersPtr
newCallback_Room_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_getUsersPtr
newCallback_Room_getUsers(T* instance, void (T::*cb)(const ::Chat::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Room_AddUser : public Callback_Room_AddUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_AddUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_AddUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_AddUser : public Callback_Room_AddUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_AddUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Chat::RoomPrx proxy = ::Chat::RoomPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_AddUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_SendMessage : public Callback_Room_SendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_SendMessage : public Callback_Room_SendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_Destroy : public Callback_Room_Destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_Destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_Destroy : public Callback_Room_Destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_Destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_LeaveRoom : public Callback_Room_LeaveRoom_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_LeaveRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_LeaveRoom : public Callback_Room_LeaveRoom_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_LeaveRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
